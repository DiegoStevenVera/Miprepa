# -*- coding: utf-8 -*-
# Generated by Django 1.9.6 on 2016-05-25 19:55
from __future__ import unicode_literals

import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import miprepa.utils.mixins


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0001_initial'),
        ('courses', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ChallengeSurvival',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('questions_saved', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=[])),
                ('questions_requested', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=[])),
                ('quantity_questions', models.IntegerField(default=0)),
                ('time', models.IntegerField(default=0)),
                ('user_university', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='challengessurvival', to='accounts.UserUniversity')),
            ],
            options={
                'verbose_name': 'Reto Survival',
                'ordering': ('-created_at', '-quantity_questions', 'time'),
                'verbose_name_plural': 'Retos Survival',
            },
            bases=(miprepa.utils.mixins.UidMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ChallengeTest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('questions_saved', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=[])),
                ('questions_requested', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=[])),
                ('courses_id', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=[])),
                ('goods', models.IntegerField(default=0)),
                ('bads', models.IntegerField(default=0)),
                ('blanks', models.IntegerField(default=0)),
                ('time', models.IntegerField(default=0)),
                ('user_university', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='challengestest', to='accounts.UserUniversity')),
            ],
            options={
                'verbose_name': 'Reto Test',
                'ordering': ('-created_at', '-goods', 'bads', 'blanks', 'time'),
                'verbose_name_plural': 'Retos Test',
            },
            bases=(miprepa.utils.mixins.UidMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ChallengeTimeOut',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('questions_saved', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=[], verbose_name='Preguntas Guardadas')),
                ('questions_requested', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=[], verbose_name='Preguntas Pedidas')),
                ('quantity_questions', models.IntegerField(blank=True, null=True, verbose_name='Preguntas correctas')),
                ('user_university', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='challengestimeout', to='accounts.UserUniversity', verbose_name='Usuario')),
            ],
            options={
                'verbose_name': 'Reto Time Out',
                'ordering': ('-created_at', '-quantity_questions'),
                'verbose_name_plural': 'Retos Time Out',
            },
            bases=(miprepa.utils.mixins.UidMixin, models.Model),
        ),
        migrations.CreateModel(
            name='History',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('answer', models.CharField(blank=True, max_length=1)),
                ('status', models.CharField(choices=[('correct', 'Correcto'), ('wrong', 'Err√≥neo'), ('blank', 'En blanco')], db_index=True, max_length=8)),
                ('ch_survival', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='history', to='challenges.ChallengeSurvival')),
                ('ch_test', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='history', to='challenges.ChallengeTest')),
                ('ch_timeout', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='history', to='challenges.ChallengeTimeOut')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resolutions', to='courses.Question')),
                ('user_university', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='history', to='accounts.UserUniversity')),
            ],
            bases=(miprepa.utils.mixins.UidMixin, models.Model),
        ),
    ]
